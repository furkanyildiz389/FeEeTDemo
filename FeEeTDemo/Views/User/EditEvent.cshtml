@model EntityLayer.Concrete.Event
@{
    ViewData["Title"] = "Etkinlik Düzenle";
    Layout = "~/Views/Shared/_userLayout.cshtml";
}

<div class="container">
    <div class="card">
        <div class="card-header">
            <h3>Etkinlik Düzenle</h3>
        </div>
        <div class="card-body">
            <form asp-action="EditEvent" method="post">
                <input type="hidden" asp-for="Id" />
                <input type="hidden" asp-for="CreatedAt" />
                <input type="hidden" asp-for="CreatedById" />

                <div class="mb-3">
                    <label for="Title" class="form-label">Başlık</label>
                    <input type="text" class="form-control" id="Title" name="Title" value="@Model.Title" required />
                </div>

                <div class="mb-3">
                    <label for="Description" class="form-label">Açıklama</label>
                    <textarea class="form-control" id="Description" name="Description" rows="3" required>@Model.Description</textarea>
                </div>

                <div class="mb-3">
                    <label for="Location" class="form-label">Konum</label>
                    <input type="text" class="form-control" id="Location" name="Location" value="@Model.Location" required />
                </div>

                <div class="mb-3">
                    <label asp-for="VotingDeadline" class="form-label">Son Oy Verme Tarihi</label>
                    <input type="datetime-local" asp-for="VotingDeadline" class="form-control" required />
                    <span asp-validation-for="VotingDeadline" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label class="form-check-label">
                        <input type="checkbox" asp-for="IsActive" class="form-check-input" />
                        Durum
                    </label>
                </div>

                <div class="mb-3">
                    <label class="form-label">Tarih Seçenekleri</label>
                    <div id="dateOptionsContainer">
                        @for (var i = 0; i < Model.DateTimeOptions.Count; i++)
                        {
                            <div class="input-group mb-2">
                                <input type="datetime-local" class="form-control"
                                       name="DateTimeOptions[@i].DateTime"
                                       value="@Model.DateTimeOptions[i].DateTime.ToString("yyyy-MM-ddTHH:mm")"
                                       min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")"
                                       required />
                                <input type="hidden" name="DateTimeOptions[@i].Id" value="@Model.DateTimeOptions[i].Id" />
                                <input type="hidden" name="DateTimeOptions[@i].EventId" value="@Model.Id" />
                                <button type="button" class="btn btn-danger remove-date">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        }
                    </div>
                    <button type="button" id="addDateOption" class="btn btn-secondary mt-2">
                        <i class="fas fa-plus"></i> Yeni Tarih Ekle
                    </button>
                </div>

                <div class="mb-3">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Değişiklikleri Kaydet
                    </button>
                    <a href="@Url.Action("EventList")" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Geri Dön
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            let dateOptionIndex = @Model.DateTimeOptions.Count;

            // Geçmiş tarih kontrolü fonksiyonu
            function validateDateInput(input) {
                const selectedDate = new Date(input.value);
                const now = new Date();
                now.setHours(0, 0, 0, 0);

                const selectedDateOnly = new Date(selectedDate);
                selectedDateOnly.setHours(0, 0, 0, 0);

                if (selectedDateOnly < now) {
                    alert("Geçmiş bir tarih seçemezsiniz!");
                    input.value = '';
                    return false;
                }
                return true;
            }

            // Tarih seçenekleri validasyonu
            function validateDateOptions() {
                const dateValues = new Set();
                let isValid = true;

                // Sadece tarih seçenekleri container'ındaki inputları kontrol et
                $('#dateOptionsContainer input[type="datetime-local"]').each(function () {
                    const dateValue = $(this).val();

                    // Geçmiş tarih kontrolü
                    if (!validateDateInput(this)) {
                        isValid = false;
                        return false;
                    }

                    // Aynı tarih kontrolü
                    if (dateValues.has(dateValue)) {
                        alert("Tarih seçeneklerinde aynı tarih ve saati birden fazla kez seçemezsiniz!");
                        isValid = false;
                        return false;
                    }
                    dateValues.add(dateValue);
                });

                return isValid;
            }

            // Form submit
            $('form').on('submit', function (e) {
                e.preventDefault();

                // Voting deadline için ayrı geçmiş tarih kontrolü
                const votingDeadline = new Date($('#VotingDeadline').val());
                const now = new Date();
                if (votingDeadline < now) {
                    alert("Son oy verme tarihi geçmiş bir tarih olamaz!");
                    return false;
                }

                // Tarih seçenekleri için validasyon
                if (!validateDateOptions()) {
                    return false;
                }

                const formData = new FormData(this);

                $.ajax({
                    url: $(this).attr('action'),
                    method: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.success === false) {
                            alert('Düzenleme sırasında bir hata oluştu.');
                            return;
                        }
                        window.location.href = '@Url.Action("EventList")';
                    },
                    error: function (xhr, status, error) {
                        alert('Düzenleme sırasında bir hata oluştu.');
                        console.error('Error:', error);
                    }
                });
            });

            // Yeni tarih seçeneği ekleme
            $('#addDateOption').click(function () {
                const newDateOption = `
                    <div class="input-group mb-2">
                        <input type="datetime-local" class="form-control"
                               name="DateTimeOptions[${dateOptionIndex}].DateTime" required />
                        <input type="hidden" name="DateTimeOptions[${dateOptionIndex}].EventId" value="@Model.Id" />
                        <button type="button" class="btn btn-danger remove-date">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>`;
                $('#dateOptionsContainer').append(newDateOption);
                dateOptionIndex++;
            });

            // Tarih seçeneği silme
            $(document).on('click', '.remove-date', function () {
                if ($('#dateOptionsContainer .input-group').length > 1) {
                    $(this).closest('.input-group').remove();

                    $('#dateOptionsContainer .input-group').each(function (index) {
                        $(this).find('input[type="datetime-local"]').attr('name', `DateTimeOptions[${index}].DateTime`);
                        $(this).find('input[type="hidden"][name*="EventId"]').attr('name', `DateTimeOptions[${index}].EventId`);
                        $(this).find('input[type="hidden"][name*="Id"]').attr('name', `DateTimeOptions[${index}].Id`);
                    });
                } else {
                    alert('En az bir tarih seçeneği olmalıdır!');
                }
            });

            // Tarih değişikliği kontrolü
            $(document).on('change', 'input[type="datetime-local"]', function () {
                validateDateInput(this);
            });
        });
    </script>
}